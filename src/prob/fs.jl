"""
    solve_fault_study(case::Dict{String,Any}, solver; kwargs...)

Solves a fault study using all active faults under `case["fault"]` for transmission (matpower) data sets given an optimization `solver`

`kwargs` can be any valid keyword argument for PowerModels' solve_model function.
"""
function solve_fault_study(case::Dict{String,Any}, solver; kwargs...)
    data = deepcopy(case)
    check_pf!(data, solver)

    result = _PM.solve_model(data, _PM.IVRPowerModel, solver, build_fault_study; ref_extensions=[ref_add_fault!], solution_processors=[solution_fs!], kwargs...)

    return result
end


"""
    solve_fault_study(case::Dict{String,<:Any}, fault_studies::Dict{String,<:Any}, solver; kwargs...)::Dict{String,Any}

Solves a series fault studies in `fault_studies`, e.g., generated by [`build_fault_study`](@ref build_fault_study) for transmission (matpower) data sets given an optimization `solver`

`kwargs` can be any valid keyword argument for PowerModels' solve_model function.
"""
function solve_fault_study(case::Dict{String,<:Any}, fault_studies::Dict{String,<:Any}, solver; kwargs...)::Dict{String,Any}
    solutions = deepcopy(fault_studies)

    data = deepcopy(case)
    check_pf!(data, solver)

    for (i,fault) in fault_studies
        data["fault"] = Dict{String,Any}("1" => fault)

        solutions[i] = _PM.solve_model(data, _PM.IVRPowerModel, solver, build_fault_study; ref_extensions=[ref_add_fault!], solution_processors=[solution_fs!], kwargs...)
    end


    return solutions
end


"""
    solve_fault_study(file::String, solver; kwargs...)

Given a `file`, parses file and solves a series of fault studies
"""
function solve_fault_study(file::String, solver; kwargs...)
    data = parse_file(file)

    return solve_fault_study(data, build_fault_study(data), solver; kwargs...)
end


"""
	build_fault_study(pm::_PM.AbstractPowerModel)

Builds a transmission fault study optimization problem
"""
function build_fault_study(pm::_PM.AbstractPowerModel)
    _PM.variable_bus_voltage(pm, bounded = true)
    variable_bus_fault_current(pm)
    variable_branch_current(pm, bounded = false)
    variable_gen(pm, bounded = false) # inverter currents are always bounded
    variable_pq_inverter(pm)

    has_pq_gens = false
    has_v_gens = false

    for (n, nw_ref) in _PM.nws(pm)
        for (i, gen) in nw_ref[:gen]
            if gen["inverter_mode"] == "pq"
                has_pq_gens = true
            end

            if gen["inverter_mode"] == "v"
                has_v_gens = true
            end
        end
    end

    if has_pq_gens && !has_v_gens
        objective_max_inverter_power(pm)
    elseif !has_pq_gens && has_v_gens
        objective_min_inverter_voltage_regulation(pm)
    elseif has_pq_gens && has_v_gens
        objective_min_inverter_error(pm)
    end

    constraint_gen_voltage_drop(pm)
    constraint_pq_inverter(pm)
    constraint_v_inverter(pm)

    for i in _PM.ids(pm, :fault)
        constraint_bus_fault_current(pm, i)
    end

    for (i, bus) in _PM.ref(pm, :bus)
        constraint_current_balance(pm, i)
    end

    for i in _PM.ids(pm, :branch)
        _PM.constraint_current_from(pm, i)
        _PM.constraint_current_to(pm, i)
        _PM.constraint_voltage_drop(pm, i)
    end
end
